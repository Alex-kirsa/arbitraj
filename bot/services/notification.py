import logging
from contextlib import suppress

from aiogram import Bot
from aiogram.types import Chat
from aiogram_i18n import I18nContext

from bot.db.models.models import Users, Offers
from bot.utils.constants import DEFAULT_CHANNEL_TOPICS
from configreader import config


async def notificate_web_masters_new_offer(webmasters: list[Users], bot: Bot, i18n: I18nContext, offer_model: Offers):
    user_info = await bot.get_chat(offer_model.user_id)
    for web_master in webmasters:
        offer_info = (f"<b>üì¢ –î–æ –±—ñ—Ä–∂—ñ –¥–æ–¥–∞–Ω–∏–π –Ω–æ–≤–∏–π –æ—Ñ—Ñ–µ—Ä:</b>\n\n"
                      # f"<b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b> {user_info.full_name} @{user_info.username}\n"
                      f"<b>–ö–∞–Ω–∞–ª:</b> {offer_model.channel_name}\n"
                      f"<b>–¢–µ–º–∞—Ç–∏–∫–∞:</b> {DEFAULT_CHANNEL_TOPICS.get(offer_model.channel_theme)}\n"
                      )

        if offer_model.custom_channel_theme:
            offer_info += f"<b>–ö–∞—Å—Ç–æ–º–Ω–∞ —Ç–µ–º–∞—Ç–∏–∫–∞:</b> {offer_model.custom_channel_theme}\n"

        offer_info += (f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫: {offer_model.target_request_amount}\n"
                       f"–¶—ñ–Ω–∞ –∑–∞ –∑–∞—è–≤–∫—É: {offer_model.second_price_per_request} –≥—Ä–Ω.\n"
                       # f"–ó–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–∞ —Å—É–º–º–∞: {offer_model.money_reserved}\n"
                       # f"–î–µ–¥–ª–∞–π–Ω: {offer_model.offer_deadline}\n"
                       f"–í–∏–º–æ–≥–∏ –¥–æ —Ç—Ä–∞—Ñ—ñ–∫—É: {offer_model.traffic_rules}\n")
        # f"–ö–æ–º–µ–Ω—Ç–∞—Ä: {offer_model.comment}\n"
        # f"–ö–æ–Ω—Ç–∞–∫—Ç: {offer_model.contacts}\n")

        try:
            await bot.send_message(web_master.user_id, i18n.get('new_offer_noty', offer_info=offer_info))
        except Exception as e:
            logging.info(f'Error while sending message to {web_master.user_id}: {e}')


async def notificate_web_master_offer_done(webmasters: list[Users], bot: Bot, i18n: I18nContext, offer_model: Offers):
    text = f'–û—Ñ—Ñ–µ—Ä "{offer_model.channel_name}"  –≤–∏–∫–æ–Ω–∞–Ω–æ". –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –û—Å–æ–±–∏—Å—Ç—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏ —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ –æ—Ñ—Ñ–µ—Ä–∏'
    for web_master in webmasters:
        with suppress(Exception):
            await bot.send_message(web_master.user_id, text)


async def send_admins_offer_completed(bot: Bot, i18n: I18nContext, offer_model: Offers):
    text = f'–û—Ñ—Ñ–µ—Ä "{offer_model.channel_name}"  –≤–∏–∫–æ–Ω–∞–Ω–æ'
    with suppress(Exception):
        await bot.send_message(config.offers_channel_id, text)


async def withdraw_request_notification(bot: Bot, user_info: Chat, amount: int, data: dict,
                                        bank_name: str = None, card_number: str = None,
                                        crypto_adress: str = None):
    text_for_channel = (f"<b>üì¢ –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞</b>\n\n"
                        f"<b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b> {user_info.full_name} @{user_info.username}\n"
                        f"<b>–°—É–º–∞:</b> {amount}\n"
                        f"<b>–ü–ª–∞—Ç—ñ–∂–Ω–∞ —Å–∏—Å—Ç–µ–º–∞:</b> {data['paymentType']['name']}\n")
    if bank_name:
        text_for_channel += f"<b>–ë–∞–Ω–∫:</b> {bank_name}\n<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏:</b> {card_number}\n"
    if crypto_adress:
        text_for_channel += f"<b>Crypto Adress:</b> {crypto_adress}\n"
    await bot.send_message(config.withdraw_channel_id, text_for_channel)
